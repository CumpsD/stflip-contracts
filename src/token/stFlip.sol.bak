// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity ^0.8.7;

import "./tStorage.sol";
import "../utils/Ownership.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol";
import "@openzeppelin/contracts/utils/math/SafeCast.sol";
import "@solmate/src/utils/FixedPointMathLib.sol";
import "forge-std/console.sol";
/**
 * @title stFlip token contract
 * @notice This is the token contract for StakedFLIP. It is backed 1:1 by native FLIP. 
 * It is rebasing and also a voting token. It is a fork of the YAM token contract. After each
 * transfer, a new checkpoint is added via `votesUpgradeable` which we have modified to automatically
 * self-delegate every address and disable delegation to every address, thus the latest checkpoint is the
 * `underlying` balance for a given address. This fork is here: https://github.com/thunderhead-labs/openzeppelin-contracts-upgradeable.
 * The changes are trivial. `underlying` is the representation used for balance in storage,
 * although the real balance is `underlying` * `yamsScalingFactor` / `internalDecimals`. `yamsScalingFactor`
 * is updated by calling Rebase, which the Rebaser contract handles. `yamsScalingFactor` also increases over
 * a period of time to ensure continous reward distribution. Yams are the `underlying` balance while `fragments`
 * are the balance the user/other contracts actually see. Relevant sources: https://forum.openzeppelin.com/t/self-delegation-in-erc20votes/17501/17 and 
 * https://github.com/aragon/osx/blob/a52bbae69f78e74d6a17647370ccfa2f2ea9bbf0/packages/contracts/src/token/ERC20/governance/GovernanceERC20.sol#L113
 */
contract stFlip is Initializable, Ownership, TokenStorage, VotesUpgradeable {
    using FixedPointMathLib for uint256;
    constructor() {
        _disableInitializers();
    }

    /**
     * @notice Event emitted when tokens are rebased
     */
    event Rebase(uint256 epoch, uint256 currentSupply, uint256 newSupply, uint256 rebaseInterval);

    /* - ERC20 Events - */

    /**
     * @notice EIP20 Transfer event
     */
    event Transfer(address indexed from, address indexed to, uint amount);

    /**
     * @notice EIP20 Approval event
     */
    event Approval(address indexed owner, address indexed spender, uint amount);

    /* - Extra Events - */
    /**
     * @notice Tokens minted event
     */
    event Mint(address to, uint256 amount);

    /**
     * Modifier to ensure token is not frozen for certain operations
     */
    modifier notPaused() {
        require(paused==false, "paused");
        _;
    }
    
    /**
     * Sets initial initialization parameters
     * @param name_ Token name (Staked Chainflip)
     * @param symbol_ Token symbol (stFLIP)
     * @param decimals_ Decimals (18)
     * @param gov_ Governance address
     * @param initialSupply_ Initial supply (0)
     */
    function initialize(string memory name_, string memory symbol_, uint8 decimals_, address gov_, uint256 initialSupply_) initializer public {
        name = name_;
        symbol = symbol_;
        decimals = decimals_;

        preSyncSupply = SafeCast.toUint96(initialSupply_);
        rewardsToSync = 0;
        syncEnd = SafeCast.toUint32(block.timestamp);
        syncStart = SafeCast.toUint32(block.timestamp);

        // _transferVotingUnits(address(0), gov_, _balanceToShares(initialSupply_));
        _transfer(address(0), gov_, initialSupply_);
        __AccessControlDefaultAdminRules_init(0, gov_);
        _grantRole(REBASER_ROLE, gov_);
        _grantRole(MINTER_ROLE, gov_);
    }


    /**
    * @notice Computes the current max scaling factor
    */
    function maxScalingFactor() external view returns (uint256) {
        return _maxScalingFactor();
    }

    /**
     * @dev Balances are uint256 so we must ensure that we don't
     * set a rebaseFactor that when multiplied by underlying will 
     * cause a uint256 overflow. We will never get to this point since
     * uint256 is 10e51 times larger than the total supply of Chainflip
     * (90m).
     */
    function _maxScalingFactor() internal view returns (uint256) {
        // scaling factor can only go up to 2**256-1 = initSupply * yamsScalingFactor
        // this is used to check if yamsScalingFactor will be too high to compute balances when rebasing.
        return type(uint).max / _getTotalSupply();
    }

    /**
    * @notice Freezes any user transfers of the contract
    * @dev Limited to onlyGov modifier
    */
    function pause(bool status) external onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {
        paused = status;
        return true;
    }

    /**
    * @notice Mints new tokens, increasing totalSupply, initSupply, and a users balance.
    * @dev Limited to onlyMinter modifier
    */
    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) notPaused returns (bool) {
        _mint(to, amount);
        return true;
    }

    /**
     * Mint functions
     * @param to Address to mint to
     * @param amount Amount to mint
     */
    function _mint(address to, uint256 amount) internal {

        _transfer(address(0), to, amount);
        // make sure the mint didnt push maxScalingFactor too low
        // require(nextYamScalingFactor <= _maxScalingFactor(), "max scaling factor too low");

        emit Mint(to, amount);
    }

    /**
     * Internal function to handle transfers/mints/burns
     * @param from address to decrease balance
     * @param to address to increase balance
     * @param amount balance delta
     * @dev _transferVotingRights handles the checkpointing functionality
     * within `VotesUpgradeable`. If the `to` or `from` address is zero address
     * then the function will increment/decrement total supply depending on whether
     * it is a mint or a burn. If it is just a normal transfer then it will append a new 
     * checkpoint to the `from` address and the `to` address with their new balances
     */
    function _transfer(address from, address to, uint256 amount) internal {
        uint256 shares = _balanceToShares(amount);

        if (from == address(0)) {
            preSyncSupply += SafeCast.toUint96(amount);
        } else if (to == address(0)) {
            preSyncSupply -= SafeCast.toUint96(amount);
        }

        _transferVotingUnits(from, to, shares);

        emit Transfer(from, to, amount);
    }

    /**
    * @dev Transfer tokens to a specified address.
    * @param to The address to transfer to.
    * @param value The amount to be transferred.
    * @return True on success, false otherwise.
    */
    function transfer(address to, uint256 value) external notPaused returns (bool) {
        // note, this means as scaling factor grows, dust will be untransferrable.
        // minimum transfer value == yamsScalingFactor / 1e24;

        _transfer(msg.sender, to, value);

        return true;
    }

    /**
     * Burn tokens
     * @param value Amount to burn
     * @param refundee Address to burn from
     */
    function burn(uint256 value, address refundee) external notPaused onlyRole(BURNER_ROLE) returns (bool) {
        _burn(value, refundee);
        return true;
    } 

    /**
     * Burn tokens
     * @param value Amount to burn
     * @param refundee Address to burn from
     * @dev Only the burner contract can burn tokens.
     */
    function _burn(uint256 value, address refundee) internal {
        // note, this means as scaling factor grows, dust will be untransferrable.
        // minimum transfer value == yamsScalingFactor / 1e24;

        _transfer(refundee, address(0), value);

        // require(nextYamScalingFactor <= _maxScalingFactor(), "max scaling factor too low");
    }
    /**
    * @dev Transfer tokens from one address to another.
    * @param from The address you want to send tokens from.
    * @param to The address you want to transfer to.
    * @param value The amount of tokens to be transferred.
    */
    function transferFrom(address from, address to, uint256 value) external notPaused returns (bool) {
        // decrease allowance
        _allowedBalances[from][msg.sender] = _allowedBalances[from][msg.sender] - value;

        _transfer(from, to, value);

        return true;
    }

    /**
    * @param who The address to query.
    * @return The balance of the specified address.
    */
    function balanceOf(address who) external view returns (uint256) {
        return _balanceOf(who);
    }

    /**
     * Queries balance of address
     * @param who The address to query
     * @dev This retrieves the underlying (yams) from `VotesUpgradeable`
     * which is the value of the latest balance checkpoint. It is then scaled
     * by the rebaseFactor in `yamToFragment`.
     */
    function _balanceOf(address who) internal view returns (uint256) {
        return _sharesToBalance(super.getVotes(who));
    }

    /** @notice Currently returns the internal storage amount
    * @param who The address to query.
    * @return The underlying balance of the specified address.
    */
    function sharesOf(address who) external view returns (uint256) {
        return super.getVotes(who);
    }

    /**
     * @dev Function to check the amount of tokens that an owner has allowed to a spender.
     * @param owner_ The address which owns the funds.
     * @param spender The address which will spend the funds.
     * @return The number of tokens still available for the spender.
     */
    function allowance(address owner_, address spender) external view returns (uint256) {
        return _allowedBalances[owner_][spender];
    }

    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of
     * msg.sender. This method is included for ERC20 compatibility.
     * increaseAllowance and decreaseAllowance should be used instead.
     * Changing an allowance with this method brings the risk that someone may transfer both
     * the old and the new allowance - if they are both greater than zero - if a transfer
     * transaction is mined before the later approve() call is mined.
     *
     * @param spender The address which will spend the funds.
     * @param value The amount of tokens to be spent.
     */
    function approve(address spender, uint256 value) external returns (bool) {
        _allowedBalances[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    /**
     * Function called by Rebaser that sets the new rebase factor
     * @param epoch Used for event
     * @param newSupply Value to set the new supply factor to
     * @param syncInterval Time for the token to reach the `newSupply`
     * @dev The rebase factor will not actually increase to `value` right after this
     * transaction, it will linearly increase over the `rebaseInterval` specified. See
     * `_yamsScalingFactor` for more details. You can't set the rebase factor if the 
     * supply is zero. Rebases will not occur while the supply is small. 
     */
    function syncSupply(uint256 epoch, uint256 newSupply, uint256 syncInterval) external onlyRole(REBASER_ROLE) returns (bool) {
        uint256 currentSupply = _totalSupply();

        if (newSupply < currentSupply) {
            preSyncSupply = SafeCast.toUint96(newSupply);
            rewardsToSync = 0;
            syncEnd       = SafeCast.toUint32(block.timestamp);
            syncStart     = SafeCast.toUint32(block.timestamp);
        } else {
            preSyncSupply = SafeCast.toUint96(currentSupply);
            rewardsToSync = SafeCast.toUint96(newSupply - currentSupply);
            syncEnd       = SafeCast.toUint32(block.timestamp + syncInterval);
            syncStart     = SafeCast.toUint32(block.timestamp);
        }

        emit Rebase(epoch, currentSupply, newSupply, syncInterval);

        return true;
    }

    /**
     * Convert underlying to balance
     * @param yam The amount of yam (underlying) to convert to fragment (actual balance)
     */
    // function yamToFragment(uint256 yam) external view returns (uint256) {
    //     return _yamToFragment(yam);
    // }

    /**
     * Convert balance to underlying
     * @param value The amount of fragment (actual balance) to convert to yam (underlying)
     */
    // function fragmentToYam(uint256 value) external view returns (uint256) {
    //     return _fragmentToYam(value);
    // }

    /**
     * Retrieves the total balance of `underlying` from `VotesUpgradeable`
     * latest supply checkpoint
     */
    function initSupply() external view returns (uint256) {
        return _getTotalSupply();
    }
    
    // /**
    //  * Converts from yam (underlying) to fragment (actual balance)
    // //  * @param yam The amount of yam (underlying)
    //  */
    // // function _yamToFragment(uint256 yam) internal view returns (uint256) {
    // //     return yam * _yamsScalingFactor() / internalDecimals;
    // // }

    // /**
    //  * Converts from fragment (actual balance) to yam (underlying)
    // //  * @param value The amount of fragment (actual balance)
    //  */
    // function _fragmentToYam(uint256 value) internal view returns (uint256) {
    //     return value * internalDecimals / _yamsScalingFactor();
    // }

    function balanceToShares(uint256 balance) external view returns (uint256) {
        return _balanceToShares(balance);
    }

    function sharesToBalance(uint256 shares) external view returns (uint256) {
        return _sharesToBalance(shares);
    }

    function _balanceToShares(uint256 balance) internal view returns (uint256) {
        uint256 totalShares = _getTotalSupply();
        console.log("bal -> share:",balance, totalShares == 0 ? balance * 10**6 :  balance * totalShares * 10**6 / _totalSupplyRaw()  );

        return totalShares == 0 ? balance * 10**6 :  balance * totalShares * 10**6 / _totalSupplyRaw() ; //mulDivDown(totalShares * 10**18, _totalSupplyRaw());
    }

// balance (18) * totalShares(24) * 10**6 / totalSupplyRaw(24) / 10**1
    function _sharesToBalance(uint256 shares) internal view returns (uint256) {
        uint256 totalShares = _getTotalSupply();
        // console.log("totalShares: ", totalShares);
        // console.log("shares:      ", shares);
        // console.log("totalSupplyRaw" , _totalSupplyRaw());
        // console.log("totalSupply  " , _totalSupply());
        // console.log("bal         :", shares * _totalSupplyRaw() / totalShares / 10**6);
        console.log("share -> bal:",shares,   totalShares == 0 ? shares / 10**6 : shares * _totalSupplyRaw() / totalShares / 10**6);
        return totalShares == 0 ? shares / 10**6 : shares * _totalSupplyRaw() / totalShares / 10**6;        //.mulDivDown(_totalSupplyRaw(),totalShares * 10**24);
    }

// shares (24) * totalSupplyRaw (24) * 10**18 / totalShares (24) / 10**24

    // function _balanceToShares(uint256 balance) internal view returns (uint256) {
    //     uint256 totalShares = _getTotalSupply();
    //     (uint256 preSyncSupply, uint256 rewardsNumerator, uint256 rewardsDenominator) = _totalSupplyComponents();
    //     // return totalShares == 0 ? balance : balance * totalShares * rewardsDenominator / (preSyncSupply * rewardsDenominator + rewardsNumerator);
    //     return totalShares == 0 ? balance : (balance * totalShares * rewardsDenominator).mulDivDown(1, ) / (preSyncSupply * rewardsDenominator + rewardsNumerator);
    // }
    // function _sharesToBalance(uint256 shares) internal view returns (uint256) {
    //     uint256 totalShares = _getTotalSupply();
    //     (uint256 preSyncSupply, uint256 rewardsNumerator, uint256 rewardsDenominator) = _totalSupplyComponents();
    //     return totalShares == 0 ? shares : (shares * preSyncSupply * rewardsDenominator + shares * rewardsNumerator) / (totalShares * rewardsDenominator);
    // }

    function balancePerShare() external view returns (uint256) {
        return _sharesToBalance(10**24);
    }
    /**
     * Perform rescues in case they are needed
     * @param token token address
     * @param to recipient address
     * @param amount amount
     */
    function rescueTokens(address token, address to, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {
        // transfer to
        SafeERC20.safeTransfer(IERC20(token), to, amount);
        return true;
    }

    /**
     * Total supply of stFLIP
     * @dev Keep in mind that `_getTotalSupply` is an internal function 
     * from `VotesUpgradeable` that returns the total supply of underlying,
     * (value of latest supply checkpoint) this is also known as `initSupply` 
     * in the stFLIP contract.
     */
    function _totalSupplyComponents() internal view returns (uint256, uint256, uint256) {
        uint32 blockTimestamp = SafeCast.toUint32(block.timestamp);
        uint32 syncEnd_ = syncEnd;
        uint32 syncStart_ = syncStart;
        uint96 preSyncSupply_ = preSyncSupply;
        uint96 rewardsToSync_ = rewardsToSync;
        
        // console.log("blockTimestamp: ", blockTimestamp);
        // console.log("syncEnd_:       ", syncEnd_);
        // console.log("syncStart_:     ", syncStart_);
        // console.log("preSyncSupply_: ", preSyncSupply_);
        // console.log("rewardsToSync_: ", rewardsToSync_);

        if (blockTimestamp >= syncEnd_) {
            return (preSyncSupply_, rewardsToSync_, 1);
        }

        if (blockTimestamp == syncStart_) {
            return (preSyncSupply_, 0 ,1);
        }

        console.log("blockTimestamp - syncStart_: ", blockTimestamp - syncStart_);
        console.log("syncEnd_ - syncStart_:       ", syncEnd_ - syncStart_);
        // console.log("(rewardsToSync_ * (blockTimestamp - syncStart_)", (rewardsToSync_ * (blockTimestamp - syncStart_)));
        uint256 rewardsNumerator = uint256(rewardsToSync_) * (blockTimestamp - syncStart_);
        uint256 rewardsDenominator = (syncEnd_ - syncStart_);
        return (preSyncSupply_, rewardsNumerator, rewardsDenominator);
    }

    function _totalSupplyRaw() internal view returns (uint256) {
        (uint256 a, uint256 b, uint256 c) = _totalSupplyComponents();
        return a*10**6 + b.mulDivDown(10**6, c);
    }

    function totalSupplyRaw() external view returns (uint256) {
        return _totalSupplyRaw();
    }

    function _totalSupply() internal view returns (uint256) {
        return _totalSupplyRaw() / 10**6;
    }
    // function _totalSupply() internal view returns (uint256) {
    //     uint32 blockTimestamp = SafeCast.toUint32(block.timestamp);
    //     uint32 syncEnd_ = syncEnd;
    //     uint32 syncStart_ = syncStart;
    //     uint96 preSyncSupply_ = preSyncSupply;
    //     uint96 rewardsToSync_ = rewardsToSync;
        
    //     // console.log("blockTimestamp: ", blockTimestamp);
    //     // console.log("syncEnd_:       ", syncEnd_);
    //     // console.log("syncStart_:     ", syncStart_);
    //     // console.log("preSyncSupply_: ", preSyncSupply_);
    //     // console.log("rewardsToSync_: ", rewardsToSync_);

    //     if (blockTimestamp >= syncEnd_) {
    //         return preSyncSupply_ + rewardsToSync_;
    //     }

    //     if (blockTimestamp == syncStart_) {
    //         return preSyncSupply_;
    //     }

    //     console.log("blockTimestamp - syncStart_: ", blockTimestamp - syncStart_);
    //     console.log("syncEnd_ - syncStart_:       ", syncEnd_ - syncStart_);
    //     // console.log("(rewardsToSync_ * (blockTimestamp - syncStart_)", (rewardsToSync_ * (blockTimestamp - syncStart_)));
    //     uint256 unlockedRewards = (uint256(rewardsToSync_) * (blockTimestamp - syncStart_) / (syncEnd_ - syncStart_));
    //     return preSyncSupply_ + unlockedRewards;
    // }


    /**
     * Calculates the current rebase factor of the token
     * @dev The rebase factor monotonically increases or decreases over the next interval
     * depending on whether there were net rewards or slashing during the last rebase. It increases
     * linearly based on how much time has elapsed. Once the interval ends this just returns the
     * `nextYamsScalingFactor`. 
     */

    /**
     * Public getter for total supply of stFLIP
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply();
    }

    /**
     * Overriding the clock set in `VotesUpgradeable` since
     * GovernorOmega uses timestamp
     */
    function clock() public view override returns (uint48) {
        return uint48(block.timestamp);
    }

    // solhint-disable-next-line func-name-mixedcase
    function CLOCK_MODE() public pure override returns (string memory) {
        return "mode=timestamp";
    }

}





