{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenReceived",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenSold",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "tokensToReceive",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenReceive",
          "type": "address"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensToReceive",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensToReceive",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensToReceive",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPrecise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "aPrecise",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token1Balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "virtualPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "contract LiquidityPoolToken",
          "name": "lpTokenTargetAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract LiquidityPoolToken",
          "name": "lpTokenContract",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "rampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "tokensReceived",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpBurned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenReceive",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "setAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_dy",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addLiquidity(uint256[2],uint256,uint256)": "46eda749",
    "calculateRemoveLiquidity(uint256)": "f2fad2b6",
    "calculateRemoveLiquidityOneToken(uint256,address)": "805d2766",
    "calculateSwap(address,uint256)": "1de8d8cb",
    "calculateTokenAmount(uint256[],bool)": "e6ab2806",
    "getA()": "d46300fd",
    "getAPrecise()": "0ba81959",
    "getToken0()": "ba94a315",
    "getToken0Balance()": "c2d9ecfa",
    "getToken1()": "6f26a710",
    "getToken1Balance()": "5153786b",
    "getVirtualPrice()": "e25aa5fa",
    "initialize(address,address,string,string,uint256,uint256,uint256,address)": "afcd5f4b",
    "lpToken()": "5fcbd285",
    "rampA(uint256,uint256)": "593d132c",
    "removeLiquidity(uint256,uint256[2],uint256)": "d6f0df62",
    "removeLiquidityImbalance(uint256[2],uint256,uint256)": "bfc65c9b",
    "removeLiquidityOneToken(uint256,address,uint256,uint256)": "ce1fdb8b",
    "setAdminFee(uint256)": "8beb60b6",
    "setSwapFee(uint256)": "34e19907",
    "stopRampA()": "c4db7fa0",
    "swap(address,uint256,uint256,uint256)": "c9ec9248",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenReceived\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenSold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"tokensToReceive\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenReceive\",\"type\":\"address\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aPrecise\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token1Balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"contract LiquidityPoolToken\",\"name\":\"lpTokenTargetAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract LiquidityPoolToken\",\"name\":\"lpTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"tokensReceived\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenReceive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dy\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"TenderSwap is a light-weight StableSwap implementation for two assets. See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf). that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets). It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change as the total supply of the token 'rebases'.\",\"events\":{\"AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)\":{\"params\":{\"fees\":\"fees deducted for each of the tokens added corresponding to pool cardinality of [token0, token1]\",\"invariant\":\"pool invariant after adding liquidity\",\"lpTokenSupply\":\"the lpToken supply after minting\",\"provider\":\"address of the account providing liquidity\",\"tokenAmounts\":\"array of token amounts provided corresponding to pool cardinality of [token0, token1]\"}},\"NewAdminFee(uint256)\":{\"params\":{\"newAdminFee\":\"admin fee after update\"}},\"NewSwapFee(uint256)\":{\"params\":{\"newSwapFee\":\"swap fee after update\"}},\"RampA(uint256,uint256,uint256,uint256)\":{\"params\":{\"futureTime\":\"ramp end timestamp\",\"initialTime\":\"ramp start timestamp\",\"newA\":\"target value of A to ramp up to\",\"oldA\":\"initial A value\"}},\"RemoveLiquidity(address,uint256[2],uint256)\":{\"params\":{\"lpTokenSupply\":\"total supply of liquidity pool token after removing liquidity\",\"provider\":\"address of the account removing liquidity\",\"tokenAmounts\":\"array of token amounts removed corresponding to pool cardinality of [token0, token1]\"}},\"RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)\":{\"params\":{\"fees\":\"fees for each of the tokens removed corresponding to pool cardinality of [token0, token1]\",\"invariant\":\"pool invariant after removing liquidity\",\"lpTokenSupply\":\"total supply of liquidity pool token after removing liquidity\",\"provider\":\"address of the the account removing liquidity imbalanced\",\"tokenAmounts\":\"array of amounts of tokens being removed corresponding  to pool cardinality of [token0, token1]\"}},\"RemoveLiquidityOne(address,uint256,uint256,address,uint256)\":{\"params\":{\"lpTokenAmount\":\"amount of liquidity pool tokens burnt\",\"lpTokenSupply\":\"total supply of liquidity pool token after removing liquidity\",\"provider\":\"address of the account removing liquidity\",\"receivedAmount\":\"amount of tokens received\",\"tokenReceived\":\"address of the token for which liquidity was removed\"}},\"StopRampA(uint256,uint256)\":{\"params\":{\"currentA\":\"current value of A\",\"time\":\"timestamp of when ramp is stopped\"}},\"Swap(address,address,uint256,uint256)\":{\"params\":{\"amountReceived\":\"amount of tokens received in exchange\",\"amountSold\":\"amount of tokens swapped\",\"buyer\":\"address of the account initiating the swap\",\"tokenSold\":\"address of the swapped token\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[2],uint256,uint256)\":{\"params\":{\"_amounts\":\"the amounts of each token to add, in their native precision          according to the cardinality of the pool [token0, token1]\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"lpMinted\":\"amount of LP token user minted and received\"}},\"calculateRemoveLiquidity(uint256)\":{\"params\":{\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"tokensToReceive\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(uint256,address)\":{\"params\":{\"tokenAmount\":\"the amount of LP token to burn\",\"tokenReceive\":\"the token to receive\"},\"returns\":{\"tokensToReceive\":\"calculated amount of underlying token to be received. available to withdraw\"}},\"calculateSwap(address,uint256)\":{\"params\":{\"_dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"_tokenFrom\":\"the token the user wants to sell\"},\"returns\":{\"tokensToReceive\":\"amount of tokens the user will receive\"}},\"calculateTokenAmount(uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pool cardinality of [token0, token1]. The amount should be in each pooled token's native precision.\",\"deposit\":\"whether this is a deposit or a withdrawal\"},\"returns\":{\"tokensToReceive\":\"token amount the user will receive\"}},\"getA()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"a\":\"the amplifaction coefficient\"}},\"getAPrecise()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"aPrecise\":\"A parameter in its raw precision form\"}},\"getToken0()\":{\"details\":\"EVM return type is IERC20\",\"returns\":{\"token0\":\"contract address\"}},\"getToken0Balance()\":{\"returns\":{\"token0Balance\":\"current balance of the pooled tendertoken\"}},\"getToken1()\":{\"details\":\"EVM return type is IERC20\",\"returns\":{\"token1\":\"contract address\"}},\"getToken1Balance()\":{\"returns\":{\"token1Balance\":\"current balance of the pooled underlying token\"}},\"getVirtualPrice()\":{\"returns\":{\"virtualPrice\":\"the override price, scaled to the POOL_PRECISION_DECIMALS\"}},\"initialize(address,address,string,string,uint256,uint256,uint256,address)\":{\"params\":{\"_a\":\"the amplification coefficient * n * (n - 1). See the StableSwap paper for details\",\"_adminFee\":\"default adminFee to be initialized with\",\"_fee\":\"default swap fee to be initialized with\",\"_token0\":\"First token in the pool\",\"_token1\":\"Second token in the pool\",\"lpTokenName\":\"the long-form name of the token to be deployed\",\"lpTokenSymbol\":\"the short symbol for the token to be deployed\",\"lpTokenTargetAddress\":\"the address of an existing LiquidityPoolToken contract to use as a target\"},\"returns\":{\"success\":\"true is successfully initialized\"}},\"lpToken()\":{\"returns\":{\"lpTokenContract\":\"Liquidity pool token contract.\"}},\"rampA(uint256,uint256)\":{\"params\":{\"futureA\":\"the new A to ramp towards\",\"futureTime\":\"timestamp when the new A should be reached\"}},\"removeLiquidity(uint256,uint256[2],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation        according to the cardinality of the pool [token0, token1]\"},\"returns\":{\"tokensReceived\":\"is the amounts of tokens user received\"}},\"removeLiquidityImbalance(uint256[2],uint256,uint256)\":{\"params\":{\"_amounts\":\"how much of each token to withdraw\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\"},\"returns\":{\"lpBurned\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,address,uint256,uint256)\":{\"params\":{\"_deadline\":\"latest timestamp to accept this transaction\",\"_minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"_tokenAmount\":\"the amount of the token you want to receive\",\"_tokenReceive\":\"the  token you want to receive\"},\"returns\":{\"tokensReceived\":\"amount of chosen token user received\"}},\"setAdminFee(uint256)\":{\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\"}},\"setSwapFee(uint256)\":{\"params\":{\"newSwapFee\":\"new swap fee to be applied on future transactions\"}},\"swap(address,uint256,uint256,uint256)\":{\"details\":\"revert is token being sold is not in the pool.\",\"params\":{\"_deadline\":\"latest timestamp to accept this transaction\",\"_dx\":\"the amount of tokens the user wants to swap from\",\"_minDy\":\"the min amount the user would like to receive, or revert\",\"_tokenFrom\":\"the token the user wants to sell\"},\"returns\":{\"_dy\":\"amount of tokens received\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"address of the new owner\"}}},\"title\":\"TenderSwap\",\"version\":1},\"userdoc\":{\"events\":{\"AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)\":{\"notice\":\"AddLiquidity gets emitted when liquidity is added to the pool.\"},\"NewAdminFee(uint256)\":{\"notice\":\"NewAdminFee gets emitted when the admin fee is updated.\"},\"NewSwapFee(uint256)\":{\"notice\":\"NewSwapFee gets emitted when the swap fee is updated.\"},\"RampA(uint256,uint256,uint256,uint256)\":{\"notice\":\"RampA gets emitted when A has started ramping up.\"},\"RemoveLiquidity(address,uint256[2],uint256)\":{\"notice\":\"RemoveLiquidity gets emitted when liquidity for both tokens  is removed from the pool.\"},\"RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)\":{\"notice\":\"RemoveLiquidityImbalance gets emitted when liquidity is removed weighted differently than the pool's current balances. with different weights than that of the pool.\"},\"RemoveLiquidityOne(address,uint256,uint256,address,uint256)\":{\"notice\":\"RemoveLiquidityOne gets emitted when single-sided liquidity is removed \"},\"StopRampA(uint256,uint256)\":{\"notice\":\"StopRampA gets emitted when ramping A is stopped manually\"},\"Swap(address,address,uint256,uint256)\":{\"notice\":\"Swap gets emitted when an accounts exchanges tokens.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[2],uint256,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(uint256,address)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateSwap(address,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"calculateTokenAmount(uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"getA()\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise()\":{\"notice\":\"Return A in its raw precision form\"},\"getToken0()\":{\"notice\":\"Returns the contract address for token0\"},\"getToken0Balance()\":{\"notice\":\"Return current balance of token0 (tender) in the pool\"},\"getToken1()\":{\"notice\":\"Returns the contract address for token1\"},\"getToken1Balance()\":{\"notice\":\"Return current balance of token1 (underlying) in the pool\"},\"getVirtualPrice()\":{\"notice\":\"Get the override price, to help calculate profit\"},\"initialize(address,address,string,string,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes this Swap contract with the given parameters. This will also clone a LPToken contract that represents users' LP positions. The owner of LPToken will be this contract - which means only this contract is allowed to mint/burn tokens.\"},\"lpToken()\":{\"notice\":\"Returns the liquidity pool token contract.\"},\"rampA(uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA and futureTime Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"removeLiquidity(uint256,uint256[2],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityImbalance(uint256[2],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances.\"},\"removeLiquidityOneToken(uint256,address,uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"setAdminFee(uint256)\":{\"notice\":\"Update the admin fee. Admin fee takes portion of the swap fee.\"},\"setSwapFee(uint256)\":{\"notice\":\"Update the swap fee to be applied on swaps\"},\"stopRampA()\":{\"notice\":\"Stop ramping A immediately. Reverts if ramp A is already stopped.\"},\"swap(address,uint256,uint256,uint256)\":{\"notice\":\"Swap two tokens using this pool\"},\"transferOwnership(address)\":{\"notice\":\"Changes the owner of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tenderswap/ITenderSwap.sol\":\"ITenderSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618\",\"dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093\",\"dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39\",\"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d60039d30fc910757604a2bd75969e47f64833981e66de1f5843a671167f386b\",\"dweb:/ipfs/QmU9d5yDZQpb572GxN1L7EPocjyLjrWksoE8AFb1SEVSUb\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17a4063bc918df0f7bb9cbf04c6f0bb4977afab3f2fc212bc138a178312a221d\",\"dweb:/ipfs/QmZMdvsHP5mDEAAdrK4bNeNh47TfmSFgN9qEBFTbie7zmm\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\":{\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912\",\"dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://187b5c3a1c9e77678732a2cc5284237f9cfca6bc28ee8bc0a0f4f951d7b3a2f8\",\"dweb:/ipfs/Qmb2KFr7WuQu7btdCiftQG64vTzrG4UyzVmo53EYHcnHYA\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28074f6df7132e83819042a06ef75ae53c88c53c077b8222b9772b780d58bd58\",\"dweb:/ipfs/QmXXwSxWn4XGCy218fn3f2m3UmFNUiroeQ8sCR3vzNU6Wc\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb693afc2a614ec7afee965caaf5d53c3f32644e33286f60d17ae0e9aca84d44\",\"dweb:/ipfs/QmVJy43EBWvVT5NgpsV8WJfDHtZbnqZGMhmv1WbWaV5dJV\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"src/tenderswap/ITenderSwap.sol\":{\"keccak256\":\"0x366fd9dda7e43599b4b4483894c113a2b04a4e4dd525716b7bbe812acee4a920\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23aaa5abe6f8a0f5a5649de2b1f3c1cd199fcd1d383bf2ea08c3c3ee81eb236b\",\"dweb:/ipfs/QmPi1PoyhqriCPgW3j7dpNiVJBvLwGQUftHd49jumbWrrx\"]},\"src/tenderswap/LiquidityPoolToken.sol\":{\"keccak256\":\"0xe3a13689f1edd25f26d28b18ea65512344a4dd3ac0e71c59d6ac2a93ee1c2b1a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5680de49d1616e7681eab73e23a7917bd9427ff2e103f2ef311a8ca82dd68909\",\"dweb:/ipfs/QmSrvimPs5eLr14wqP4i5hxs6FN9ZNEeaHnQ9m3FBrSyde\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[2]",
              "name": "tokenAmounts",
              "type": "uint256[2]",
              "indexed": false
            },
            {
              "internalType": "uint256[2]",
              "name": "fees",
              "type": "uint256[2]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "invariant",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "lpTokenSupply",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AddLiquidity",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newAdminFee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "NewAdminFee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newSwapFee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "NewSwapFee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "oldA",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "newA",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "initialTime",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "futureTime",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RampA",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[2]",
              "name": "tokenAmounts",
              "type": "uint256[2]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "lpTokenSupply",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RemoveLiquidity",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256[2]",
              "name": "tokenAmounts",
              "type": "uint256[2]",
              "indexed": false
            },
            {
              "internalType": "uint256[2]",
              "name": "fees",
              "type": "uint256[2]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "invariant",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "lpTokenSupply",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RemoveLiquidityImbalance",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "lpTokenAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "lpTokenSupply",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenReceived",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "receivedAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RemoveLiquidityOne",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "currentA",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StopRampA",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenSold",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amountSold",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amountReceived",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Swap",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[2]",
              "name": "_amounts",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "_minToMint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "lpMinted",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateRemoveLiquidity",
          "outputs": [
            {
              "internalType": "uint256[2]",
              "name": "tokensToReceive",
              "type": "uint256[2]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenReceive",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateRemoveLiquidityOneToken",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokensToReceive",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_tokenFrom",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_dx",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateSwap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokensToReceive",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "deposit",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateTokenAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokensToReceive",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getA",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "a",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAPrecise",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "aPrecise",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getToken0",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getToken0Balance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "token0Balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getToken1",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getToken1Balance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "token1Balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getVirtualPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "virtualPrice",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "_token1",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "lpTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lpTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "_a",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_fee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_adminFee",
              "type": "uint256"
            },
            {
              "internalType": "contract LiquidityPoolToken",
              "name": "lpTokenTargetAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "lpToken",
          "outputs": [
            {
              "internalType": "contract LiquidityPoolToken",
              "name": "lpTokenContract",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "futureA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "futureTime",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rampA"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[2]",
              "name": "minAmounts",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeLiquidity",
          "outputs": [
            {
              "internalType": "uint256[2]",
              "name": "tokensReceived",
              "type": "uint256[2]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[2]",
              "name": "_amounts",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256",
              "name": "_maxBurnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeLiquidityImbalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "lpBurned",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "_tokenReceive",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_minAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeLiquidityOneToken",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokensReceived",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newAdminFee",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAdminFee"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newSwapFee",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setSwapFee"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "stopRampA"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_tokenFrom",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_dx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minDy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swap",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_dy",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addLiquidity(uint256[2],uint256,uint256)": {
            "params": {
              "_amounts": "the amounts of each token to add, in their native precision          according to the cardinality of the pool [token0, token1]",
              "_deadline": "latest timestamp to accept this transaction",
              "_minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
            },
            "returns": {
              "lpMinted": "amount of LP token user minted and received"
            }
          },
          "calculateRemoveLiquidity(uint256)": {
            "params": {
              "amount": "the amount of LP tokens that would be burned on withdrawal"
            },
            "returns": {
              "tokensToReceive": "array of token balances that the user will receive"
            }
          },
          "calculateRemoveLiquidityOneToken(uint256,address)": {
            "params": {
              "tokenAmount": "the amount of LP token to burn",
              "tokenReceive": "the token to receive"
            },
            "returns": {
              "tokensToReceive": "calculated amount of underlying token to be received. available to withdraw"
            }
          },
          "calculateSwap(address,uint256)": {
            "params": {
              "_dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
              "_tokenFrom": "the token the user wants to sell"
            },
            "returns": {
              "tokensToReceive": "amount of tokens the user will receive"
            }
          },
          "calculateTokenAmount(uint256[],bool)": {
            "details": "This shouldn't be used outside frontends for user estimates.",
            "params": {
              "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pool cardinality of [token0, token1]. The amount should be in each pooled token's native precision.",
              "deposit": "whether this is a deposit or a withdrawal"
            },
            "returns": {
              "tokensToReceive": "token amount the user will receive"
            }
          },
          "getA()": {
            "details": "See the StableSwap paper for details",
            "returns": {
              "a": "the amplifaction coefficient"
            }
          },
          "getAPrecise()": {
            "details": "See the StableSwap paper for details",
            "returns": {
              "aPrecise": "A parameter in its raw precision form"
            }
          },
          "getToken0()": {
            "details": "EVM return type is IERC20",
            "returns": {
              "token0": "contract address"
            }
          },
          "getToken0Balance()": {
            "returns": {
              "token0Balance": "current balance of the pooled tendertoken"
            }
          },
          "getToken1()": {
            "details": "EVM return type is IERC20",
            "returns": {
              "token1": "contract address"
            }
          },
          "getToken1Balance()": {
            "returns": {
              "token1Balance": "current balance of the pooled underlying token"
            }
          },
          "getVirtualPrice()": {
            "returns": {
              "virtualPrice": "the override price, scaled to the POOL_PRECISION_DECIMALS"
            }
          },
          "initialize(address,address,string,string,uint256,uint256,uint256,address)": {
            "params": {
              "_a": "the amplification coefficient * n * (n - 1). See the StableSwap paper for details",
              "_adminFee": "default adminFee to be initialized with",
              "_fee": "default swap fee to be initialized with",
              "_token0": "First token in the pool",
              "_token1": "Second token in the pool",
              "lpTokenName": "the long-form name of the token to be deployed",
              "lpTokenSymbol": "the short symbol for the token to be deployed",
              "lpTokenTargetAddress": "the address of an existing LiquidityPoolToken contract to use as a target"
            },
            "returns": {
              "success": "true is successfully initialized"
            }
          },
          "lpToken()": {
            "returns": {
              "lpTokenContract": "Liquidity pool token contract."
            }
          },
          "rampA(uint256,uint256)": {
            "params": {
              "futureA": "the new A to ramp towards",
              "futureTime": "timestamp when the new A should be reached"
            }
          },
          "removeLiquidity(uint256,uint256[2],uint256)": {
            "details": "Liquidity can always be removed, even when the pool is paused.",
            "params": {
              "amount": "the amount of LP tokens to burn",
              "deadline": "latest timestamp to accept this transaction",
              "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation        according to the cardinality of the pool [token0, token1]"
            },
            "returns": {
              "tokensReceived": "is the amounts of tokens user received"
            }
          },
          "removeLiquidityImbalance(uint256[2],uint256,uint256)": {
            "params": {
              "_amounts": "how much of each token to withdraw",
              "_deadline": "latest timestamp to accept this transaction",
              "_maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation."
            },
            "returns": {
              "lpBurned": "amount of LP tokens burned"
            }
          },
          "removeLiquidityOneToken(uint256,address,uint256,uint256)": {
            "params": {
              "_deadline": "latest timestamp to accept this transaction",
              "_minAmount": "the minimum amount to withdraw, otherwise revert",
              "_tokenAmount": "the amount of the token you want to receive",
              "_tokenReceive": "the  token you want to receive"
            },
            "returns": {
              "tokensReceived": "amount of chosen token user received"
            }
          },
          "setAdminFee(uint256)": {
            "params": {
              "newAdminFee": "new admin fee to be applied on future transactions"
            }
          },
          "setSwapFee(uint256)": {
            "params": {
              "newSwapFee": "new swap fee to be applied on future transactions"
            }
          },
          "swap(address,uint256,uint256,uint256)": {
            "details": "revert is token being sold is not in the pool.",
            "params": {
              "_deadline": "latest timestamp to accept this transaction",
              "_dx": "the amount of tokens the user wants to swap from",
              "_minDy": "the min amount the user would like to receive, or revert",
              "_tokenFrom": "the token the user wants to sell"
            },
            "returns": {
              "_dy": "amount of tokens received"
            }
          },
          "transferOwnership(address)": {
            "params": {
              "_newOwner": "address of the new owner"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addLiquidity(uint256[2],uint256,uint256)": {
            "notice": "Add liquidity to the pool with the given amounts of tokens"
          },
          "calculateRemoveLiquidity(uint256)": {
            "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
          },
          "calculateRemoveLiquidityOneToken(uint256,address)": {
            "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
          },
          "calculateSwap(address,uint256)": {
            "notice": "Calculate amount of tokens you receive on swap"
          },
          "calculateTokenAmount(uint256[],bool)": {
            "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
          },
          "getA()": {
            "notice": "Return A, the amplification coefficient * n * (n - 1)"
          },
          "getAPrecise()": {
            "notice": "Return A in its raw precision form"
          },
          "getToken0()": {
            "notice": "Returns the contract address for token0"
          },
          "getToken0Balance()": {
            "notice": "Return current balance of token0 (tender) in the pool"
          },
          "getToken1()": {
            "notice": "Returns the contract address for token1"
          },
          "getToken1Balance()": {
            "notice": "Return current balance of token1 (underlying) in the pool"
          },
          "getVirtualPrice()": {
            "notice": "Get the override price, to help calculate profit"
          },
          "initialize(address,address,string,string,uint256,uint256,uint256,address)": {
            "notice": "Initializes this Swap contract with the given parameters. This will also clone a LPToken contract that represents users' LP positions. The owner of LPToken will be this contract - which means only this contract is allowed to mint/burn tokens."
          },
          "lpToken()": {
            "notice": "Returns the liquidity pool token contract."
          },
          "rampA(uint256,uint256)": {
            "notice": "Start ramping up or down A parameter towards given futureA and futureTime Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
          },
          "removeLiquidity(uint256,uint256[2],uint256)": {
            "notice": "Burn LP tokens to remove liquidity from the pool."
          },
          "removeLiquidityImbalance(uint256[2],uint256,uint256)": {
            "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances."
          },
          "removeLiquidityOneToken(uint256,address,uint256,uint256)": {
            "notice": "Remove liquidity from the pool all in one token."
          },
          "setAdminFee(uint256)": {
            "notice": "Update the admin fee. Admin fee takes portion of the swap fee."
          },
          "setSwapFee(uint256)": {
            "notice": "Update the swap fee to be applied on swaps"
          },
          "stopRampA()": {
            "notice": "Stop ramping A immediately. Reverts if ramp A is already stopped."
          },
          "swap(address,uint256,uint256,uint256)": {
            "notice": "Swap two tokens using this pool"
          },
          "transferOwnership(address)": {
            "notice": "Changes the owner of the contract"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/tenderswap/ITenderSwap.sol": "ITenderSwap"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
        "keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
        "urls": [
          "bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
          "dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
        "urls": [
          "bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
          "dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
        "keccak256": "0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42",
        "urls": [
          "bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093",
          "dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
        "keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
        "urls": [
          "bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
          "dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
        "keccak256": "0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2",
        "urls": [
          "bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39",
          "dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
        "keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
        "urls": [
          "bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d",
          "dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
        "keccak256": "0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f",
        "urls": [
          "bzz-raw://d60039d30fc910757604a2bd75969e47f64833981e66de1f5843a671167f386b",
          "dweb:/ipfs/QmU9d5yDZQpb572GxN1L7EPocjyLjrWksoE8AFb1SEVSUb"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
        "keccak256": "0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024",
        "urls": [
          "bzz-raw://17a4063bc918df0f7bb9cbf04c6f0bb4977afab3f2fc212bc138a178312a221d",
          "dweb:/ipfs/QmZMdvsHP5mDEAAdrK4bNeNh47TfmSFgN9qEBFTbie7zmm"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
        "urls": [
          "bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
          "dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol": {
        "keccak256": "0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d",
        "urls": [
          "bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912",
          "dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
        "keccak256": "0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da",
        "urls": [
          "bzz-raw://187b5c3a1c9e77678732a2cc5284237f9cfca6bc28ee8bc0a0f4f951d7b3a2f8",
          "dweb:/ipfs/Qmb2KFr7WuQu7btdCiftQG64vTzrG4UyzVmo53EYHcnHYA"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol": {
        "keccak256": "0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971",
        "urls": [
          "bzz-raw://28074f6df7132e83819042a06ef75ae53c88c53c077b8222b9772b780d58bd58",
          "dweb:/ipfs/QmXXwSxWn4XGCy218fn3f2m3UmFNUiroeQ8sCR3vzNU6Wc"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol": {
        "keccak256": "0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931",
        "urls": [
          "bzz-raw://bb693afc2a614ec7afee965caaf5d53c3f32644e33286f60d17ae0e9aca84d44",
          "dweb:/ipfs/QmVJy43EBWvVT5NgpsV8WJfDHtZbnqZGMhmv1WbWaV5dJV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
        "keccak256": "0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a",
        "urls": [
          "bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4",
          "dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "src/tenderswap/ITenderSwap.sol": {
        "keccak256": "0x366fd9dda7e43599b4b4483894c113a2b04a4e4dd525716b7bbe812acee4a920",
        "urls": [
          "bzz-raw://23aaa5abe6f8a0f5a5649de2b1f3c1cd199fcd1d383bf2ea08c3c3ee81eb236b",
          "dweb:/ipfs/QmPi1PoyhqriCPgW3j7dpNiVJBvLwGQUftHd49jumbWrrx"
        ],
        "license": "MIT"
      },
      "src/tenderswap/LiquidityPoolToken.sol": {
        "keccak256": "0xe3a13689f1edd25f26d28b18ea65512344a4dd3ac0e71c59d6ac2a93ee1c2b1a",
        "urls": [
          "bzz-raw://5680de49d1616e7681eab73e23a7917bd9427ff2e103f2ef311a8ca82dd68909",
          "dweb:/ipfs/QmSrvimPs5eLr14wqP4i5hxs6FN9ZNEeaHnQ9m3FBrSyde"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/tenderswap/ITenderSwap.sol",
    "id": 28170,
    "exportedSymbols": {
      "AddressUpgradeable": [
        25350
      ],
      "ContextUpgradeable": [
        25392
      ],
      "CountersUpgradeable": [
        25466
      ],
      "ECDSAUpgradeable": [
        26002
      ],
      "EIP712Upgradeable": [
        26152
      ],
      "ERC20BurnableUpgradeable": [
        24814
      ],
      "ERC20PermitUpgradeable": [
        25030
      ],
      "ERC20Upgradeable": [
        24672
      ],
      "IERC20": [
        27175
      ],
      "IERC20MetadataUpgradeable": [
        24839
      ],
      "IERC20PermitUpgradeable": [
        25066
      ],
      "IERC20Upgradeable": [
        24750
      ],
      "ITenderSwap": [
        28169
      ],
      "Initializable": [
        23987
      ],
      "LiquidityPoolToken": [
        28239
      ],
      "MathUpgradeable": [
        27017
      ],
      "OwnableUpgradeable": [
        23818
      ],
      "StringsUpgradeable": [
        25641
      ]
    },
    "nodeType": "SourceUnit",
    "src": "100:15018:34",
    "nodes": [
      {
        "id": 27843,
        "nodeType": "ImportDirective",
        "src": "100:56:34",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28170,
        "sourceUnit": 27176,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27844,
        "nodeType": "ImportDirective",
        "src": "158:34:34",
        "nodes": [],
        "absolutePath": "src/tenderswap/LiquidityPoolToken.sol",
        "file": "./LiquidityPoolToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28170,
        "sourceUnit": 28240,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27845,
        "nodeType": "PragmaDirective",
        "src": "196:23:34",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 28169,
        "nodeType": "ContractDefinition",
        "src": "693:14423:34",
        "nodes": [
          {
            "id": 27858,
            "nodeType": "EventDefinition",
            "src": "1161:96:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27847,
              "nodeType": "StructuredDocumentation",
              "src": "837:318:34",
              "text": " @notice Swap gets emitted when an accounts exchanges tokens.\n @param buyer address of the account initiating the swap\n @param tokenSold address of the swapped token\n @param amountSold amount of tokens swapped\n @param amountReceived amount of tokens received in exchange"
            },
            "eventSelector": "fa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235",
            "name": "Swap",
            "nameLocation": "1167:4:34",
            "parameters": {
              "id": 27857,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27849,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "buyer",
                  "nameLocation": "1188:5:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27858,
                  "src": "1172:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27848,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1172:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27852,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenSold",
                  "nameLocation": "1202:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27858,
                  "src": "1195:16:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 27851,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27850,
                      "name": "IERC20",
                      "nameLocations": [
                        "1195:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "1195:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "1195:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27854,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amountSold",
                  "nameLocation": "1221:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27858,
                  "src": "1213:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27853,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1213:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27856,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amountReceived",
                  "nameLocation": "1241:14:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27858,
                  "src": "1233:22:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27855,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1233:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1171:85:34"
            }
          },
          {
            "id": 27875,
            "nodeType": "EventDefinition",
            "src": "1785:181:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27859,
              "nodeType": "StructuredDocumentation",
              "src": "1265:514:34",
              "text": " @notice AddLiquidity gets emitted when liquidity is added to the pool.\n @param provider address of the account providing liquidity\n @param tokenAmounts array of token amounts provided corresponding to pool cardinality of [token0, token1]\n @param fees fees deducted for each of the tokens added corresponding to pool cardinality of [token0, token1]\n @param invariant pool invariant after adding liquidity\n @param lpTokenSupply the lpToken supply after minting"
            },
            "eventSelector": "26f55a85081d24974e85c6c00045d0f0453991e95873f52bff0d21af4079a768",
            "name": "AddLiquidity",
            "nameLocation": "1791:12:34",
            "parameters": {
              "id": 27874,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27861,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "provider",
                  "nameLocation": "1830:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27875,
                  "src": "1814:24:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27860,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1814:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27865,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenAmounts",
                  "nameLocation": "1860:12:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27875,
                  "src": "1849:23:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 27862,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1849:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 27864,
                    "length": {
                      "hexValue": "32",
                      "id": 27863,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1857:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1849:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27869,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fees",
                  "nameLocation": "1894:4:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27875,
                  "src": "1883:15:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 27866,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1883:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 27868,
                    "length": {
                      "hexValue": "32",
                      "id": 27867,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1891:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "1883:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27871,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "invariant",
                  "nameLocation": "1917:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27875,
                  "src": "1909:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27870,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1909:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27873,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lpTokenSupply",
                  "nameLocation": "1945:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27875,
                  "src": "1937:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27872,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1937:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1803:162:34"
            }
          },
          {
            "id": 27886,
            "nodeType": "EventDefinition",
            "src": "2373:96:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27876,
              "nodeType": "StructuredDocumentation",
              "src": "1974:393:34",
              "text": " @notice RemoveLiquidity gets emitted when liquidity for both tokens \n is removed from the pool.\n @param provider address of the account removing liquidity\n @param tokenAmounts array of token amounts removed corresponding to pool cardinality of [token0, token1]\n @param lpTokenSupply total supply of liquidity pool token after removing liquidity"
            },
            "eventSelector": "dd3c0336a16f1b64f172b7bb0dad5b2b3c7c76f91e8c4aafd6aae60dce800153",
            "name": "RemoveLiquidity",
            "nameLocation": "2379:15:34",
            "parameters": {
              "id": 27885,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27878,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "provider",
                  "nameLocation": "2411:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27886,
                  "src": "2395:24:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27877,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2395:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27882,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenAmounts",
                  "nameLocation": "2432:12:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27886,
                  "src": "2421:23:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 27879,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2421:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 27881,
                    "length": {
                      "hexValue": "32",
                      "id": 27880,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2429:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "2421:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27884,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lpTokenSupply",
                  "nameLocation": "2454:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27886,
                  "src": "2446:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2446:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2394:74:34"
            }
          },
          {
            "id": 27900,
            "nodeType": "EventDefinition",
            "src": "2947:195:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27887,
              "nodeType": "StructuredDocumentation",
              "src": "2477:464:34",
              "text": " @notice RemoveLiquidityOne gets emitted when single-sided liquidity is removed \n @param provider address of the account removing liquidity\n @param lpTokenAmount amount of liquidity pool tokens burnt\n @param lpTokenSupply total supply of liquidity pool token after removing liquidity\n @param tokenReceived address of the token for which liquidity was removed\n @param receivedAmount amount of tokens received"
            },
            "eventSelector": "ba12cf5924628c5ee284b041a95cfab90fcf2c395258d4d1a8d5858d389c1fa4",
            "name": "RemoveLiquidityOne",
            "nameLocation": "2953:18:34",
            "parameters": {
              "id": 27899,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27889,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "provider",
                  "nameLocation": "2998:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27900,
                  "src": "2982:24:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27888,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2982:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27891,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lpTokenAmount",
                  "nameLocation": "3025:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27900,
                  "src": "3017:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27890,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3017:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27893,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lpTokenSupply",
                  "nameLocation": "3057:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27900,
                  "src": "3049:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27892,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3049:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27896,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenReceived",
                  "nameLocation": "3088:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27900,
                  "src": "3081:20:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 27895,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27894,
                      "name": "IERC20",
                      "nameLocations": [
                        "3081:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "3081:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "3081:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27898,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "receivedAmount",
                  "nameLocation": "3120:14:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27900,
                  "src": "3112:22:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27897,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3112:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2971:170:34"
            }
          },
          {
            "id": 27917,
            "nodeType": "EventDefinition",
            "src": "3844:193:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27901,
              "nodeType": "StructuredDocumentation",
              "src": "3150:688:34",
              "text": " @notice RemoveLiquidityImbalance gets emitted when liquidity is removed weighted differently than the\n pool's current balances.\n with different weights than that of the pool.\n @param provider address of the the account removing liquidity imbalanced\n @param tokenAmounts array of amounts of tokens being removed corresponding \n to pool cardinality of [token0, token1]\n @param fees fees for each of the tokens removed corresponding to pool cardinality of [token0, token1]\n @param invariant pool invariant after removing liquidity\n @param lpTokenSupply total supply of liquidity pool token after removing liquidity"
            },
            "eventSelector": "2b5508378d7e19e0d5fa338419034731416c4f5b219a10379956f764317fd47e",
            "name": "RemoveLiquidityImbalance",
            "nameLocation": "3850:24:34",
            "parameters": {
              "id": 27916,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27903,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "provider",
                  "nameLocation": "3901:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27917,
                  "src": "3885:24:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27902,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3885:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27907,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenAmounts",
                  "nameLocation": "3931:12:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27917,
                  "src": "3920:23:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 27904,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3920:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 27906,
                    "length": {
                      "hexValue": "32",
                      "id": 27905,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3928:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "3920:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27911,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fees",
                  "nameLocation": "3965:4:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27917,
                  "src": "3954:15:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 27908,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3954:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 27910,
                    "length": {
                      "hexValue": "32",
                      "id": 27909,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3962:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "3954:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27913,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "invariant",
                  "nameLocation": "3988:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27917,
                  "src": "3980:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27912,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3980:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27915,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "lpTokenSupply",
                  "nameLocation": "4016:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27917,
                  "src": "4008:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27914,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4008:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3874:162:34"
            }
          },
          {
            "id": 27922,
            "nodeType": "EventDefinition",
            "src": "4185:39:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27918,
              "nodeType": "StructuredDocumentation",
              "src": "4045:134:34",
              "text": " @notice NewAdminFee gets emitted when the admin fee is updated.\n @param newAdminFee admin fee after update"
            },
            "eventSelector": "ab599d640ca80cde2b09b128a4154a8dfe608cb80f4c9399c8b954b01fd35f38",
            "name": "NewAdminFee",
            "nameLocation": "4191:11:34",
            "parameters": {
              "id": 27921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27920,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newAdminFee",
                  "nameLocation": "4211:11:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27922,
                  "src": "4203:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27919,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4203:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4202:21:34"
            }
          },
          {
            "id": 27927,
            "nodeType": "EventDefinition",
            "src": "4368:37:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27923,
              "nodeType": "StructuredDocumentation",
              "src": "4232:130:34",
              "text": " @notice NewSwapFee gets emitted when the swap fee is updated.\n @param newSwapFee swap fee after update"
            },
            "eventSelector": "d88ea5155021c6f8dafa1a741e173f595cdf77ce7c17d43342131d7f06afdfe5",
            "name": "NewSwapFee",
            "nameLocation": "4374:10:34",
            "parameters": {
              "id": 27926,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27925,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newSwapFee",
                  "nameLocation": "4393:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27927,
                  "src": "4385:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27924,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4385:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4384:20:34"
            }
          },
          {
            "id": 27938,
            "nodeType": "EventDefinition",
            "src": "4678:81:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27928,
              "nodeType": "StructuredDocumentation",
              "src": "4413:259:34",
              "text": " @notice RampA gets emitted when A has started ramping up.\n @param oldA initial A value\n @param newA target value of A to ramp up to\n @param initialTime ramp start timestamp\n @param futureTime ramp end timestamp"
            },
            "eventSelector": "a2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c254",
            "name": "RampA",
            "nameLocation": "4684:5:34",
            "parameters": {
              "id": 27937,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27930,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldA",
                  "nameLocation": "4698:4:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27938,
                  "src": "4690:12:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27929,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4690:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27932,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newA",
                  "nameLocation": "4712:4:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27938,
                  "src": "4704:12:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27931,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4704:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27934,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "initialTime",
                  "nameLocation": "4726:11:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27938,
                  "src": "4718:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27933,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4718:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27936,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "futureTime",
                  "nameLocation": "4747:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27938,
                  "src": "4739:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27935,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4739:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4689:69:34"
            }
          },
          {
            "id": 27945,
            "nodeType": "EventDefinition",
            "src": "4956:48:34",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27939,
              "nodeType": "StructuredDocumentation",
              "src": "4767:183:34",
              "text": " @notice StopRampA gets emitted when ramping A is stopped manually\n @param currentA current value of A\n @param time timestamp of when ramp is stopped"
            },
            "eventSelector": "46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938",
            "name": "StopRampA",
            "nameLocation": "4962:9:34",
            "parameters": {
              "id": 27944,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27941,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "currentA",
                  "nameLocation": "4980:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27945,
                  "src": "4972:16:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27940,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4972:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27943,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "time",
                  "nameLocation": "4998:4:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27945,
                  "src": "4990:12:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27942,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4990:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4971:32:34"
            }
          },
          {
            "id": 27970,
            "nodeType": "FunctionDefinition",
            "src": "5965:305:34",
            "nodes": [],
            "documentation": {
              "id": 27946,
              "nodeType": "StructuredDocumentation",
              "src": "5012:947:34",
              "text": " @notice Initializes this Swap contract with the given parameters.\n This will also clone a LPToken contract that represents users'\n LP positions. The owner of LPToken will be this contract - which means\n only this contract is allowed to mint/burn tokens.\n @param _token0 First token in the pool\n @param _token1 Second token in the pool\n @param lpTokenName the long-form name of the token to be deployed\n @param lpTokenSymbol the short symbol for the token to be deployed\n @param _a the amplification coefficient * n * (n - 1). See the\n StableSwap paper for details\n @param _fee default swap fee to be initialized with\n @param _adminFee default adminFee to be initialized with\n @param lpTokenTargetAddress the address of an existing LiquidityPoolToken contract to use as a target\n @return success true is successfully initialized"
            },
            "functionSelector": "afcd5f4b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "5974:10:34",
            "parameters": {
              "id": 27966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27949,
                  "mutability": "mutable",
                  "name": "_token0",
                  "nameLocation": "6002:7:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "5995:14:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 27948,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27947,
                      "name": "IERC20",
                      "nameLocations": [
                        "5995:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "5995:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "5995:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27952,
                  "mutability": "mutable",
                  "name": "_token1",
                  "nameLocation": "6027:7:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6020:14:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 27951,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27950,
                      "name": "IERC20",
                      "nameLocations": [
                        "6020:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "6020:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "6020:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27954,
                  "mutability": "mutable",
                  "name": "lpTokenName",
                  "nameLocation": "6059:11:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6045:25:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 27953,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6045:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27956,
                  "mutability": "mutable",
                  "name": "lpTokenSymbol",
                  "nameLocation": "6095:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6081:27:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 27955,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6081:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27958,
                  "mutability": "mutable",
                  "name": "_a",
                  "nameLocation": "6127:2:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6119:10:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27957,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6119:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27960,
                  "mutability": "mutable",
                  "name": "_fee",
                  "nameLocation": "6148:4:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6140:12:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27959,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6140:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27962,
                  "mutability": "mutable",
                  "name": "_adminFee",
                  "nameLocation": "6171:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6163:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27961,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6163:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27965,
                  "mutability": "mutable",
                  "name": "lpTokenTargetAddress",
                  "nameLocation": "6210:20:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6191:39:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LiquidityPoolToken_$28239",
                    "typeString": "contract LiquidityPoolToken"
                  },
                  "typeName": {
                    "id": 27964,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27963,
                      "name": "LiquidityPoolToken",
                      "nameLocations": [
                        "6191:18:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 28239,
                      "src": "6191:18:34"
                    },
                    "referencedDeclaration": 28239,
                    "src": "6191:18:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LiquidityPoolToken_$28239",
                      "typeString": "contract LiquidityPoolToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5984:253:34"
            },
            "returnParameters": {
              "id": 27969,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27968,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "6261:7:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27970,
                  "src": "6256:12:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 27967,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6256:4:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6255:14:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27977,
            "nodeType": "FunctionDefinition",
            "src": "6448:78:34",
            "nodes": [],
            "documentation": {
              "id": 27971,
              "nodeType": "StructuredDocumentation",
              "src": "6308:134:34",
              "text": " @notice Returns the liquidity pool token contract.\n @return lpTokenContract Liquidity pool token contract."
            },
            "functionSelector": "5fcbd285",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "lpToken",
            "nameLocation": "6457:7:34",
            "parameters": {
              "id": 27972,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6464:2:34"
            },
            "returnParameters": {
              "id": 27976,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27975,
                  "mutability": "mutable",
                  "name": "lpTokenContract",
                  "nameLocation": "6509:15:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27977,
                  "src": "6490:34:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LiquidityPoolToken_$28239",
                    "typeString": "contract LiquidityPoolToken"
                  },
                  "typeName": {
                    "id": 27974,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27973,
                      "name": "LiquidityPoolToken",
                      "nameLocations": [
                        "6490:18:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 28239,
                      "src": "6490:18:34"
                    },
                    "referencedDeclaration": 28239,
                    "src": "6490:18:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LiquidityPoolToken_$28239",
                      "typeString": "contract LiquidityPoolToken"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6489:36:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27983,
            "nodeType": "FunctionDefinition",
            "src": "6719:50:34",
            "nodes": [],
            "documentation": {
              "id": 27978,
              "nodeType": "StructuredDocumentation",
              "src": "6534:179:34",
              "text": " @notice Return A, the amplification coefficient * n * (n - 1)\n @dev See the StableSwap paper for details\n @return a the amplifaction coefficient"
            },
            "functionSelector": "d46300fd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getA",
            "nameLocation": "6728:4:34",
            "parameters": {
              "id": 27979,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6732:2:34"
            },
            "returnParameters": {
              "id": 27982,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27981,
                  "mutability": "mutable",
                  "name": "a",
                  "nameLocation": "6766:1:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27983,
                  "src": "6758:9:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27980,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6758:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6757:11:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27989,
            "nodeType": "FunctionDefinition",
            "src": "6959:64:34",
            "nodes": [],
            "documentation": {
              "id": 27984,
              "nodeType": "StructuredDocumentation",
              "src": "6777:176:34",
              "text": " @notice Return A in its raw precision form\n @dev See the StableSwap paper for details\n @return aPrecise A parameter in its raw precision form"
            },
            "functionSelector": "0ba81959",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAPrecise",
            "nameLocation": "6968:11:34",
            "parameters": {
              "id": 27985,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6979:2:34"
            },
            "returnParameters": {
              "id": 27988,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27987,
                  "mutability": "mutable",
                  "name": "aPrecise",
                  "nameLocation": "7013:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27989,
                  "src": "7005:16:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27986,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7005:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7004:18:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27996,
            "nodeType": "FunctionDefinition",
            "src": "7184:59:34",
            "nodes": [],
            "documentation": {
              "id": 27990,
              "nodeType": "StructuredDocumentation",
              "src": "7031:147:34",
              "text": " @notice Returns the contract address for token0\n @dev EVM return type is IERC20\n @return token0 contract address"
            },
            "functionSelector": "ba94a315",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getToken0",
            "nameLocation": "7193:9:34",
            "parameters": {
              "id": 27991,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7202:2:34"
            },
            "returnParameters": {
              "id": 27995,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27994,
                  "mutability": "mutable",
                  "name": "token0",
                  "nameLocation": "7235:6:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 27996,
                  "src": "7228:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 27993,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27992,
                      "name": "IERC20",
                      "nameLocations": [
                        "7228:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "7228:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "7228:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7227:15:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28003,
            "nodeType": "FunctionDefinition",
            "src": "7404:59:34",
            "nodes": [],
            "documentation": {
              "id": 27997,
              "nodeType": "StructuredDocumentation",
              "src": "7251:147:34",
              "text": " @notice Returns the contract address for token1\n @dev EVM return type is IERC20\n @return token1 contract address"
            },
            "functionSelector": "6f26a710",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getToken1",
            "nameLocation": "7413:9:34",
            "parameters": {
              "id": 27998,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7422:2:34"
            },
            "returnParameters": {
              "id": 28002,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28001,
                  "mutability": "mutable",
                  "name": "token1",
                  "nameLocation": "7455:6:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28003,
                  "src": "7448:13:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 28000,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27999,
                      "name": "IERC20",
                      "nameLocations": [
                        "7448:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "7448:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "7448:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7447:15:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28009,
            "nodeType": "FunctionDefinition",
            "src": "7631:74:34",
            "nodes": [],
            "documentation": {
              "id": 28004,
              "nodeType": "StructuredDocumentation",
              "src": "7471:154:34",
              "text": " @notice Return current balance of token0 (tender) in the pool\n @return token0Balance current balance of the pooled tendertoken"
            },
            "functionSelector": "c2d9ecfa",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getToken0Balance",
            "nameLocation": "7640:16:34",
            "parameters": {
              "id": 28005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7656:2:34"
            },
            "returnParameters": {
              "id": 28008,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28007,
                  "mutability": "mutable",
                  "name": "token0Balance",
                  "nameLocation": "7690:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28009,
                  "src": "7682:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28006,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7682:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7681:23:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28015,
            "nodeType": "FunctionDefinition",
            "src": "7882:74:34",
            "nodes": [],
            "documentation": {
              "id": 28010,
              "nodeType": "StructuredDocumentation",
              "src": "7713:163:34",
              "text": " @notice Return current balance of token1 (underlying) in the pool\n @return token1Balance current balance of the pooled underlying token"
            },
            "functionSelector": "5153786b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getToken1Balance",
            "nameLocation": "7891:16:34",
            "parameters": {
              "id": 28011,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7907:2:34"
            },
            "returnParameters": {
              "id": 28014,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28013,
                  "mutability": "mutable",
                  "name": "token1Balance",
                  "nameLocation": "7941:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28015,
                  "src": "7933:21:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28012,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7933:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7932:23:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28021,
            "nodeType": "FunctionDefinition",
            "src": "8134:72:34",
            "nodes": [],
            "documentation": {
              "id": 28016,
              "nodeType": "StructuredDocumentation",
              "src": "7964:164:34",
              "text": " @notice Get the override price, to help calculate profit\n @return virtualPrice the override price, scaled to the POOL_PRECISION_DECIMALS"
            },
            "functionSelector": "e25aa5fa",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getVirtualPrice",
            "nameLocation": "8143:15:34",
            "parameters": {
              "id": 28017,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8158:2:34"
            },
            "returnParameters": {
              "id": 28020,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28019,
                  "mutability": "mutable",
                  "name": "virtualPrice",
                  "nameLocation": "8192:12:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28021,
                  "src": "8184:20:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28018,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8184:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8183:22:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28032,
            "nodeType": "FunctionDefinition",
            "src": "8590:103:34",
            "nodes": [],
            "documentation": {
              "id": 28022,
              "nodeType": "StructuredDocumentation",
              "src": "8214:370:34",
              "text": " @notice Calculate amount of tokens you receive on swap\n @param _tokenFrom the token the user wants to sell\n @param _dx the amount of tokens the user wants to sell. If the token charges\n a fee on transfers, use the amount that gets transferred after the fee.\n @return tokensToReceive amount of tokens the user will receive"
            },
            "functionSelector": "1de8d8cb",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateSwap",
            "nameLocation": "8599:13:34",
            "parameters": {
              "id": 28028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28025,
                  "mutability": "mutable",
                  "name": "_tokenFrom",
                  "nameLocation": "8620:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28032,
                  "src": "8613:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 28024,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28023,
                      "name": "IERC20",
                      "nameLocations": [
                        "8613:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "8613:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "8613:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28027,
                  "mutability": "mutable",
                  "name": "_dx",
                  "nameLocation": "8640:3:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28032,
                  "src": "8632:11:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28026,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8632:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8612:32:34"
            },
            "returnParameters": {
              "id": 28031,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28030,
                  "mutability": "mutable",
                  "name": "tokensToReceive",
                  "nameLocation": "8676:15:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28032,
                  "src": "8668:23:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28029,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8668:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8667:25:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28042,
            "nodeType": "FunctionDefinition",
            "src": "9025:108:34",
            "nodes": [],
            "documentation": {
              "id": 28033,
              "nodeType": "StructuredDocumentation",
              "src": "8701:318:34",
              "text": " @notice A simple method to calculate amount of each underlying\n tokens that is returned upon burning given amount of LP tokens\n @param amount the amount of LP tokens that would be burned on withdrawal\n @return tokensToReceive array of token balances that the user will receive"
            },
            "functionSelector": "f2fad2b6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateRemoveLiquidity",
            "nameLocation": "9034:24:34",
            "parameters": {
              "id": 28036,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28035,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "9067:6:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28042,
                  "src": "9059:14:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28034,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9059:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9058:16:34"
            },
            "returnParameters": {
              "id": 28041,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28040,
                  "mutability": "mutable",
                  "name": "tokensToReceive",
                  "nameLocation": "9116:15:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28042,
                  "src": "9098:33:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28037,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "9098:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28039,
                    "length": {
                      "hexValue": "32",
                      "id": 28038,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9106:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "9098:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9097:35:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28053,
            "nodeType": "FunctionDefinition",
            "src": "9508:159:34",
            "nodes": [],
            "documentation": {
              "id": 28043,
              "nodeType": "StructuredDocumentation",
              "src": "9141:361:34",
              "text": " @notice Calculate the amount of underlying token available to withdraw\n when withdrawing via only single token\n @param tokenAmount the amount of LP token to burn\n @param tokenReceive the token to receive\n @return tokensToReceive calculated amount of underlying token to be received.\n available to withdraw"
            },
            "functionSelector": "805d2766",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateRemoveLiquidityOneToken",
            "nameLocation": "9517:32:34",
            "parameters": {
              "id": 28049,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28045,
                  "mutability": "mutable",
                  "name": "tokenAmount",
                  "nameLocation": "9558:11:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28053,
                  "src": "9550:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28044,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9550:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28048,
                  "mutability": "mutable",
                  "name": "tokenReceive",
                  "nameLocation": "9578:12:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28053,
                  "src": "9571:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 28047,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28046,
                      "name": "IERC20",
                      "nameLocations": [
                        "9571:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "9571:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "9571:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9549:42:34"
            },
            "returnParameters": {
              "id": 28052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28051,
                  "mutability": "mutable",
                  "name": "tokensToReceive",
                  "nameLocation": "9650:15:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28053,
                  "src": "9642:23:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28050,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9642:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9641:25:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28064,
            "nodeType": "FunctionDefinition",
            "src": "10362:147:34",
            "nodes": [],
            "documentation": {
              "id": 28054,
              "nodeType": "StructuredDocumentation",
              "src": "9675:681:34",
              "text": " @notice A simple method to calculate prices from deposits or\n withdrawals, excluding fees but including slippage. This is\n helpful as an input into the various \"min\" parameters on calls\n to fight front-running\n @dev This shouldn't be used outside frontends for user estimates.\n @param amounts an array of token amounts to deposit or withdrawal,\n corresponding to pool cardinality of [token0, token1]. The amount should be in each\n pooled token's native precision.\n @param deposit whether this is a deposit or a withdrawal\n @return tokensToReceive token amount the user will receive"
            },
            "functionSelector": "e6ab2806",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateTokenAmount",
            "nameLocation": "10371:20:34",
            "parameters": {
              "id": 28060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28057,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "10411:7:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28064,
                  "src": "10392:26:34",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28055,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "10392:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28056,
                    "nodeType": "ArrayTypeName",
                    "src": "10392:9:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28059,
                  "mutability": "mutable",
                  "name": "deposit",
                  "nameLocation": "10425:7:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28064,
                  "src": "10420:12:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 28058,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "10420:4:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10391:42:34"
            },
            "returnParameters": {
              "id": 28063,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28062,
                  "mutability": "mutable",
                  "name": "tokensToReceive",
                  "nameLocation": "10492:15:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28064,
                  "src": "10484:23:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28061,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10484:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10483:25:34"
            },
            "scope": 28169,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28079,
            "nodeType": "FunctionDefinition",
            "src": "11000:155:34",
            "nodes": [],
            "documentation": {
              "id": 28065,
              "nodeType": "StructuredDocumentation",
              "src": "10553:441:34",
              "text": " @notice Swap two tokens using this pool\n @dev revert is token being sold is not in the pool.\n @param _tokenFrom the token the user wants to sell\n @param _dx the amount of tokens the user wants to swap from\n @param _minDy the min amount the user would like to receive, or revert\n @param _deadline latest timestamp to accept this transaction\n @return _dy amount of tokens received"
            },
            "functionSelector": "c9ec9248",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "swap",
            "nameLocation": "11009:4:34",
            "parameters": {
              "id": 28075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28068,
                  "mutability": "mutable",
                  "name": "_tokenFrom",
                  "nameLocation": "11031:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28079,
                  "src": "11024:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 28067,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28066,
                      "name": "IERC20",
                      "nameLocations": [
                        "11024:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "11024:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "11024:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28070,
                  "mutability": "mutable",
                  "name": "_dx",
                  "nameLocation": "11060:3:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28079,
                  "src": "11052:11:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28069,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11052:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28072,
                  "mutability": "mutable",
                  "name": "_minDy",
                  "nameLocation": "11082:6:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28079,
                  "src": "11074:14:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28071,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11074:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28074,
                  "mutability": "mutable",
                  "name": "_deadline",
                  "nameLocation": "11107:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28079,
                  "src": "11099:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28073,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11099:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11013:110:34"
            },
            "returnParameters": {
              "id": 28078,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28077,
                  "mutability": "mutable",
                  "name": "_dy",
                  "nameLocation": "11150:3:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28079,
                  "src": "11142:11:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28076,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11142:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11141:13:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28093,
            "nodeType": "FunctionDefinition",
            "src": "11707:161:34",
            "nodes": [],
            "documentation": {
              "id": 28080,
              "nodeType": "StructuredDocumentation",
              "src": "11163:538:34",
              "text": " @notice Add liquidity to the pool with the given amounts of tokens\n @param _amounts the amounts of each token to add, in their native precision\n          according to the cardinality of the pool [token0, token1]\n @param _minToMint the minimum LP tokens adding this amount of liquidity\n should mint, otherwise revert. Handy for front-running mitigation\n @param _deadline latest timestamp to accept this transaction\n @return lpMinted amount of LP token user minted and received"
            },
            "functionSelector": "46eda749",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addLiquidity",
            "nameLocation": "11716:12:34",
            "parameters": {
              "id": 28089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28084,
                  "mutability": "mutable",
                  "name": "_amounts",
                  "nameLocation": "11759:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28093,
                  "src": "11739:28:34",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28081,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "11739:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28083,
                    "length": {
                      "hexValue": "32",
                      "id": 28082,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "11747:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "11739:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28086,
                  "mutability": "mutable",
                  "name": "_minToMint",
                  "nameLocation": "11786:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28093,
                  "src": "11778:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28085,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11778:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28088,
                  "mutability": "mutable",
                  "name": "_deadline",
                  "nameLocation": "11815:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28093,
                  "src": "11807:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28087,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11807:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11728:103:34"
            },
            "returnParameters": {
              "id": 28092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28091,
                  "mutability": "mutable",
                  "name": "lpMinted",
                  "nameLocation": "11858:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28093,
                  "src": "11850:16:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28090,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11850:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11849:18:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28109,
            "nodeType": "FunctionDefinition",
            "src": "12451:177:34",
            "nodes": [],
            "documentation": {
              "id": 28094,
              "nodeType": "StructuredDocumentation",
              "src": "11876:569:34",
              "text": " @notice Burn LP tokens to remove liquidity from the pool.\n @dev Liquidity can always be removed, even when the pool is paused.\n @param amount the amount of LP tokens to burn\n @param minAmounts the minimum amounts of each token in the pool\n        acceptable for this burn. Useful as a front-running mitigation\n        according to the cardinality of the pool [token0, token1]\n @param deadline latest timestamp to accept this transaction\n @return tokensReceived is the amounts of tokens user received"
            },
            "functionSelector": "d6f0df62",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeLiquidity",
            "nameLocation": "12460:15:34",
            "parameters": {
              "id": 28103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28096,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "12494:6:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28109,
                  "src": "12486:14:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28095,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12486:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28100,
                  "mutability": "mutable",
                  "name": "minAmounts",
                  "nameLocation": "12531:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28109,
                  "src": "12511:30:34",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28097,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "12511:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28099,
                    "length": {
                      "hexValue": "32",
                      "id": 28098,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12519:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "12511:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28102,
                  "mutability": "mutable",
                  "name": "deadline",
                  "nameLocation": "12560:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28109,
                  "src": "12552:16:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28101,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12552:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12475:100:34"
            },
            "returnParameters": {
              "id": 28108,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28107,
                  "mutability": "mutable",
                  "name": "tokensReceived",
                  "nameLocation": "12612:14:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28109,
                  "src": "12594:32:34",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28104,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "12594:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28106,
                    "length": {
                      "hexValue": "32",
                      "id": 28105,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12602:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "12594:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12593:34:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28124,
            "nodeType": "FunctionDefinition",
            "src": "13063:201:34",
            "nodes": [],
            "documentation": {
              "id": 28110,
              "nodeType": "StructuredDocumentation",
              "src": "12636:421:34",
              "text": " @notice Remove liquidity from the pool all in one token.\n @param _tokenAmount the amount of the token you want to receive\n @param _tokenReceive the  token you want to receive\n @param _minAmount the minimum amount to withdraw, otherwise revert\n @param _deadline latest timestamp to accept this transaction\n @return tokensReceived amount of chosen token user received"
            },
            "functionSelector": "ce1fdb8b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeLiquidityOneToken",
            "nameLocation": "13072:23:34",
            "parameters": {
              "id": 28120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28112,
                  "mutability": "mutable",
                  "name": "_tokenAmount",
                  "nameLocation": "13114:12:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28124,
                  "src": "13106:20:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28111,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13106:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28115,
                  "mutability": "mutable",
                  "name": "_tokenReceive",
                  "nameLocation": "13144:13:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28124,
                  "src": "13137:20:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$27175",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 28114,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28113,
                      "name": "IERC20",
                      "nameLocations": [
                        "13137:6:34"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27175,
                      "src": "13137:6:34"
                    },
                    "referencedDeclaration": 27175,
                    "src": "13137:6:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$27175",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28117,
                  "mutability": "mutable",
                  "name": "_minAmount",
                  "nameLocation": "13176:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28124,
                  "src": "13168:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28116,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13168:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28119,
                  "mutability": "mutable",
                  "name": "_deadline",
                  "nameLocation": "13205:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28124,
                  "src": "13197:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28118,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13197:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13095:126:34"
            },
            "returnParameters": {
              "id": 28123,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28122,
                  "mutability": "mutable",
                  "name": "tokensReceived",
                  "nameLocation": "13248:14:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28124,
                  "src": "13240:22:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13240:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13239:24:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28138,
            "nodeType": "FunctionDefinition",
            "src": "13722:177:34",
            "nodes": [],
            "documentation": {
              "id": 28125,
              "nodeType": "StructuredDocumentation",
              "src": "13272:444:34",
              "text": " @notice Remove liquidity from the pool, weighted differently than the\n pool's current balances.\n @param _amounts how much of each token to withdraw\n @param _maxBurnAmount the max LP token provider is willing to pay to\n remove liquidity. Useful as a front-running mitigation.\n @param _deadline latest timestamp to accept this transaction\n @return lpBurned amount of LP tokens burned"
            },
            "functionSelector": "bfc65c9b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeLiquidityImbalance",
            "nameLocation": "13731:24:34",
            "parameters": {
              "id": 28134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28129,
                  "mutability": "mutable",
                  "name": "_amounts",
                  "nameLocation": "13786:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28138,
                  "src": "13766:28:34",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_calldata_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 28126,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "13766:7:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 28128,
                    "length": {
                      "hexValue": "32",
                      "id": 28127,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "13774:1:34",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "13766:10:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28131,
                  "mutability": "mutable",
                  "name": "_maxBurnAmount",
                  "nameLocation": "13813:14:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28138,
                  "src": "13805:22:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28130,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13805:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28133,
                  "mutability": "mutable",
                  "name": "_deadline",
                  "nameLocation": "13846:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28138,
                  "src": "13838:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28132,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13838:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13755:107:34"
            },
            "returnParameters": {
              "id": 28137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28136,
                  "mutability": "mutable",
                  "name": "lpBurned",
                  "nameLocation": "13889:8:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28138,
                  "src": "13881:16:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28135,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13881:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13880:18:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28144,
            "nodeType": "FunctionDefinition",
            "src": "14117:51:34",
            "nodes": [],
            "documentation": {
              "id": 28139,
              "nodeType": "StructuredDocumentation",
              "src": "13942:169:34",
              "text": " @notice Update the admin fee. Admin fee takes portion of the swap fee.\n @param newAdminFee new admin fee to be applied on future transactions"
            },
            "functionSelector": "8beb60b6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setAdminFee",
            "nameLocation": "14126:11:34",
            "parameters": {
              "id": 28142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28141,
                  "mutability": "mutable",
                  "name": "newAdminFee",
                  "nameLocation": "14146:11:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28144,
                  "src": "14138:19:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28140,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14138:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14137:21:34"
            },
            "returnParameters": {
              "id": 28143,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14167:0:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28150,
            "nodeType": "FunctionDefinition",
            "src": "14329:49:34",
            "nodes": [],
            "documentation": {
              "id": 28145,
              "nodeType": "StructuredDocumentation",
              "src": "14176:147:34",
              "text": " @notice Update the swap fee to be applied on swaps\n @param newSwapFee new swap fee to be applied on future transactions"
            },
            "functionSelector": "34e19907",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setSwapFee",
            "nameLocation": "14338:10:34",
            "parameters": {
              "id": 28148,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28147,
                  "mutability": "mutable",
                  "name": "newSwapFee",
                  "nameLocation": "14357:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28150,
                  "src": "14349:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28146,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14349:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14348:20:34"
            },
            "returnParameters": {
              "id": 28149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14377:0:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28158,
            "nodeType": "FunctionDefinition",
            "src": "14733:61:34",
            "nodes": [],
            "documentation": {
              "id": 28151,
              "nodeType": "StructuredDocumentation",
              "src": "14386:341:34",
              "text": " @notice Start ramping up or down A parameter towards given futureA and futureTime\n Checks if the change is too rapid, and commits the new A value only when it falls under\n the limit range.\n @param futureA the new A to ramp towards\n @param futureTime timestamp when the new A should be reached"
            },
            "functionSelector": "593d132c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rampA",
            "nameLocation": "14742:5:34",
            "parameters": {
              "id": 28156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28153,
                  "mutability": "mutable",
                  "name": "futureA",
                  "nameLocation": "14756:7:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28158,
                  "src": "14748:15:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28152,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14748:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28155,
                  "mutability": "mutable",
                  "name": "futureTime",
                  "nameLocation": "14773:10:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28158,
                  "src": "14765:18:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 28154,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14765:7:34",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14747:37:34"
            },
            "returnParameters": {
              "id": 28157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14793:0:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28162,
            "nodeType": "FunctionDefinition",
            "src": "14902:30:34",
            "nodes": [],
            "documentation": {
              "id": 28159,
              "nodeType": "StructuredDocumentation",
              "src": "14802:94:34",
              "text": " @notice Stop ramping A immediately. Reverts if ramp A is already stopped."
            },
            "functionSelector": "c4db7fa0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "stopRampA",
            "nameLocation": "14911:9:34",
            "parameters": {
              "id": 28160,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14920:2:34"
            },
            "returnParameters": {
              "id": 28161,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14931:0:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28168,
            "nodeType": "FunctionDefinition",
            "src": "15058:55:34",
            "nodes": [],
            "documentation": {
              "id": 28163,
              "nodeType": "StructuredDocumentation",
              "src": "14940:112:34",
              "text": " @notice Changes the owner of the contract\n @param _newOwner address of the new owner"
            },
            "functionSelector": "f2fde38b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nameLocation": "15067:17:34",
            "parameters": {
              "id": 28166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28165,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "15093:9:34",
                  "nodeType": "VariableDeclaration",
                  "scope": 28168,
                  "src": "15085:17:34",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 28164,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15085:7:34",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15084:19:34"
            },
            "returnParameters": {
              "id": 28167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15112:0:34"
            },
            "scope": 28169,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ITenderSwap",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 27846,
          "nodeType": "StructuredDocumentation",
          "src": "225:464:34",
          "text": " @title TenderSwap\n @dev TenderSwap is a light-weight StableSwap implementation for two assets.\n See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf).\n that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets).\n It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change\n as the total supply of the token 'rebases'."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          28169
        ],
        "name": "ITenderSwap",
        "nameLocation": "703:11:34",
        "scope": 28170,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 34
}